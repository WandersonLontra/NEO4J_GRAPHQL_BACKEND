type User {
    _id: ID!
    name: String!
    liked_genres: [Genre] @relationship(type: "LIKED_GENRES", properties: "ratedGenres", direction: OUT)
    rated: [Movie] @relationship(type: "RATED", properties: "ratedOn", direction: OUT)
    recommendedMovies(limit: Int = 10): [Movie] @cypher (statement: """
      MATCH (this)-[x:RATED]->(movie:Movie)
      WITH this, gds.alpha.similarity.asVector(movie, x.rating) AS u1Vector
      MATCH (u2:User)-[x2:RATED]->(movie:Movie) WHERE u2 <> this

      WITH this, u2, u1Vector, gds.alpha.similarity.asVector(movie, x2.rating) AS u2Vector

      WITH this, u2,  gds.alpha.similarity.pearson(u1Vector, u2Vector, {vectorType: 'maps'}) AS similarity
      ORDER BY similarity DESC
      LIMIT 10

      MATCH (u2)-[r:RATED]->(m:Movie) WHERE NOT EXISTS( (this)-[:RATED]->(m) )
      WITH m, SUM( similarity * r.rating) AS score
      RETURN m
      ORDER BY score DESC LIMIT $limit
   """)
    recommendedByGenres(limit: Int = 100): [Movie] @cypher (statement: """
      MATCH (this)-[x:LIKED_GENRES]-(t)<-[:IN_GENRE]-(movie:Movie)
      WITH this,movie, COUNT(t) AS intersection, COLLECT(movie.title)AS r WHERE intersection >= 2
      MATCH (this)-[:LIKED_GENRES]-(mt)
      WITH this,movie,intersection,r, COLLECT(mt.name) AS R1
      MATCH (movie)-[:IN_GENRE]-(ot)
      WITH this,movie,intersection,r,R1, COLLECT(ot.name) AS R2
      WITH this,movie,intersection,r,R1,R2
      WITH this,movie,intersection,R1+[x IN R2 WHERE x IN R1] AS union, R1, R2
      WITH movie, ((1.0 * intersection)/SIZE(union)) AS calc
      RETURN movie
      ORDER BY calc DESC 
   """)
}

# WHERE size(apoc.coll.intersection([category in u1Vector], [category in u2Vector])) >= 1
